// <auto-generated />
using System;
using API_assistencia_tecnica.DataContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_assistencia_tecnica.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250715183727_InitialSyncedStructure")]
    partial class InitialSyncedStructure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("API_assistencia_tecnica.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BairroCliente")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CidadeCliente")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CpfCliente")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmailCliente")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NomeCliente")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RgCliente")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RuaCliente")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TelefoneCliente")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("API_assistencia_tecnica.Models.Equipamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Amperagem")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("AnoDeFabricacao")
                        .HasColumnType("int");

                    b.Property<string>("CodigoDeFabricacao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Fabricante")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NomeEquipamento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NumeroDeSerie")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Voltagem")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Equipamentos");
                });

            modelBuilder.Entity("API_assistencia_tecnica.Models.Fornecedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CnpjCpf")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("InscricaoEstadual")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NomeFornecedor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NumeroDoImovel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Representante")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Site")
                        .HasColumnType("longtext");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TelefoneCelular")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Fornecedores");
                });

            modelBuilder.Entity("API_assistencia_tecnica.Models.FornecedorPeca", b =>
                {
                    b.Property<int>("FornecedorId")
                        .HasColumnType("int");

                    b.Property<int>("PecaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataUltimaCompra")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("FornecedorId", "PecaId");

                    b.HasIndex("PecaId");

                    b.ToTable("FornecedorPecas");
                });

            modelBuilder.Entity("API_assistencia_tecnica.Models.Orcamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataAprovacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EquipamentoId")
                        .HasColumnType("int");

                    b.Property<string>("FormaDePagamento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Observacao")
                        .HasColumnType("longtext");

                    b.Property<string>("PrazoDeEntrega")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("ValorComDesconto")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("ValorSemDesconto")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EquipamentoId");

                    b.ToTable("Orcamentos");
                });

            modelBuilder.Entity("API_assistencia_tecnica.Models.OrcamentoPeca", b =>
                {
                    b.Property<int>("OrcamentoId")
                        .HasColumnType("int");

                    b.Property<int>("PecaId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("OrcamentoId", "PecaId");

                    b.HasIndex("PecaId");

                    b.ToTable("OrcamentoPecas");
                });

            modelBuilder.Entity("API_assistencia_tecnica.Models.Peca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CodigoDeProducao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Fabricante")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LocalDeFabricacao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NomePeca")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NumeroDeSerie")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("PesoKg")
                        .HasColumnType("double");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Pecas");
                });

            modelBuilder.Entity("API_assistencia_tecnica.Models.Reparo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataConclusao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataEntrega")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Diagnostico")
                        .HasColumnType("longtext");

                    b.Property<int>("EquipamentoId")
                        .HasColumnType("int");

                    b.Property<string>("FormaDePagamento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Observacao")
                        .HasColumnType("longtext");

                    b.Property<int?>("OrcamentoId")
                        .HasColumnType("int");

                    b.Property<string>("PrazoDeEntrega")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SolucaoAplicada")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("ValorComDesconto")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("ValorSemDesconto")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EquipamentoId");

                    b.HasIndex("OrcamentoId");

                    b.ToTable("Reparos");
                });

            modelBuilder.Entity("API_assistencia_tecnica.Models.ReparoEquipamento", b =>
                {
                    b.Property<int>("ReparoId")
                        .HasColumnType("int");

                    b.Property<int>("EquipamentoId")
                        .HasColumnType("int");

                    b.HasKey("ReparoId", "EquipamentoId");

                    b.HasIndex("EquipamentoId");

                    b.ToTable("ReparoEquipamentos");
                });

            modelBuilder.Entity("API_assistencia_tecnica.Models.ReparoPeca", b =>
                {
                    b.Property<int>("ReparoId")
                        .HasColumnType("int");

                    b.Property<int>("PecaId")
                        .HasColumnType("int");

                    b.Property<bool>("PecaUtilizada")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("ReparoId", "PecaId");

                    b.HasIndex("PecaId");

                    b.ToTable("ReparoPecas");
                });

            modelBuilder.Entity("API_assistencia_tecnica.Models.FornecedorPeca", b =>
                {
                    b.HasOne("API_assistencia_tecnica.Models.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_assistencia_tecnica.Models.Peca", "Peca")
                        .WithMany()
                        .HasForeignKey("PecaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fornecedor");

                    b.Navigation("Peca");
                });

            modelBuilder.Entity("API_assistencia_tecnica.Models.Orcamento", b =>
                {
                    b.HasOne("API_assistencia_tecnica.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API_assistencia_tecnica.Models.Equipamento", "Equipamento")
                        .WithMany()
                        .HasForeignKey("EquipamentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Equipamento");
                });

            modelBuilder.Entity("API_assistencia_tecnica.Models.OrcamentoPeca", b =>
                {
                    b.HasOne("API_assistencia_tecnica.Models.Orcamento", "Orcamento")
                        .WithMany()
                        .HasForeignKey("OrcamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_assistencia_tecnica.Models.Peca", "Peca")
                        .WithMany()
                        .HasForeignKey("PecaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Orcamento");

                    b.Navigation("Peca");
                });

            modelBuilder.Entity("API_assistencia_tecnica.Models.Reparo", b =>
                {
                    b.HasOne("API_assistencia_tecnica.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API_assistencia_tecnica.Models.Equipamento", "Equipamento")
                        .WithMany()
                        .HasForeignKey("EquipamentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API_assistencia_tecnica.Models.Orcamento", "Orcamento")
                        .WithMany()
                        .HasForeignKey("OrcamentoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Cliente");

                    b.Navigation("Equipamento");

                    b.Navigation("Orcamento");
                });

            modelBuilder.Entity("API_assistencia_tecnica.Models.ReparoEquipamento", b =>
                {
                    b.HasOne("API_assistencia_tecnica.Models.Equipamento", "Equipamento")
                        .WithMany()
                        .HasForeignKey("EquipamentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API_assistencia_tecnica.Models.Reparo", "Reparo")
                        .WithMany()
                        .HasForeignKey("ReparoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipamento");

                    b.Navigation("Reparo");
                });

            modelBuilder.Entity("API_assistencia_tecnica.Models.ReparoPeca", b =>
                {
                    b.HasOne("API_assistencia_tecnica.Models.Peca", "Peca")
                        .WithMany()
                        .HasForeignKey("PecaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API_assistencia_tecnica.Models.Reparo", "Reparo")
                        .WithMany()
                        .HasForeignKey("ReparoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Peca");

                    b.Navigation("Reparo");
                });
#pragma warning restore 612, 618
        }
    }
}
